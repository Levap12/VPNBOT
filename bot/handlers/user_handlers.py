from aiogram import Router,Dispatcher,F,Bot, types
from bot.keyboards.user_keyboards import get_first_start_kb
from aiogram.types import Message
from aiogram.filters import CommandStart,Command
from bot.utils import marzhapi
from dotenv import load_dotenv
import os
command_router = Router()
load_dotenv('../.env')

token = os.getenv("TOKEN_TG")
bot = Bot(token=token)

from bot.utils.logsdb import LogsDB
logs_db = LogsDB()

@command_router.message(CommandStart())
async def cmd_start(message: Message):
    main_menu = f'üññ –ü—Ä–∏–≤–µ—Ç {message.from_user.first_name}!' \
                '\n–Ø ‚Äî Nock VPN –±–æ—Ç.' \
                '\n–Ø –ø–æ–¥–∫–ª—é—á—É –≤–∞—Å –∫ VPN –∑–∞ –ø–∞—Ä—É –ø—Ä–æ—Å—Ç—ã—Ö —à–∞–≥–æ–≤.' \
                '\n–ü–æ–ø—Ä–æ–±—É–π –±–µ—Å–ø–ª–∞—Ç–Ω–æ 72 —á–∞—Å–∞ —Å–∞–º—ã–π –±—ã—Å—Ç—Ä—ã–π VPN –≤ –ï–≤—Ä–æ–ø–µ.' \
                '\n–ñ–º–∏ üîå–ü–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –Ω–∏–∂–µ –≤ –º–µ–Ω—é –∏ —è –ø–æ–º–æ–≥—É –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å VPN –Ω–∞ –ª—é–±–æ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ –∑–∞ 2 –º–∏–Ω—É—Ç—ã.\n'
    await message.answer(
        text=main_menu,
        reply_markup=get_first_start_kb(), parse_mode='HTML'
    )
    create_user_result = await marzhapi.crate_user(message.from_user.id) #—Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ø–∞–Ω–µ–ª–µ VPN
    if create_user_result['status'] == 'ok':
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É
        group_message = (
            f'üÜï –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥–∫–ª—é—á–∏–ª—Å—è!\n'
            f'–ò–º—è: {message.from_user.first_name}\n'
            f'ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {message.from_user.id}\n'
            f'Username: @{message.from_user.username}'
        )
        await bot.send_message(chat_id=-4554352254, text=group_message)
    logs_db.log_action(message.from_user.id, message.from_user.username, f"–ö–æ–º–∞–Ω–¥–∞ /start")

@command_router.message(Command("userlogs"))
async def user_logs_command(message: types.Message):
    try:
        # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –∫–æ–º–∞–Ω–¥—ã
        args = message.text.split()
        if len(args) != 2 or not args[1].isdigit():
            await message.reply("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: `/userlogs <user_id>`", parse_mode='Markdown')
            return

        user_id = int(args[1])
        logs = logs_db.get_user_logs(user_id)  # –ü–æ–ª—É—á–∞–µ–º –ª–æ–≥–∏ —á–µ—Ä–µ–∑ LogsDB

        if not logs:
            await message.reply(f"‚ùå –õ–æ–≥–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
            return

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ª–æ–≥–∞–º–∏
        logs_message = f"üìã *–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}:*\n\n"
        for action, timestamp in logs:
            logs_message += f"üïí {timestamp} ‚Äî {action}\n"

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ª–æ–≥–∞–º–∏
        await message.reply(logs_message, parse_mode='Markdown')

    except Exception as e:
        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–æ–∫, –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å LogsDB –∏–ª–∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
        logs_db.log_action(message.from_user.id, message.from_user.username, f"–û—à–∏–±–∫–∞: {str(e)}")
        await message.reply(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {e}")

# def register_user_handlers(dp: Dispatcher) -> None:
#
#     dp.message_handler(cmd_start, commands=['start'])